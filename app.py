import streamlit as st
import smtplib
from email.message import EmailMessage
import dns.resolver
import logging
from datetime import datetime
import requests

# C·∫•u h√¨nh logging
logging.basicConfig(
    filename="abuse_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(message)s",
    filemode="a"
)
logger = logging.getLogger()

# M·∫´u email cho t·ª´ng lo·∫°i v·∫•n ƒë·ªÅ
EMAIL_TEMPLATES = {
    "Phishing": """
Subject: Urgent: Phishing Website Takedown Request ‚Äì {domain}

Dear Abuse Team,

We have identified {domain} as a phishing website actively targeting users to steal sensitive data, posing severe risks to online security. 

Details:
- Domain: {domain}
- Issue: Phishing
- Evidence: {evidence}
- Description: {description}

This malicious activity violates internet safety standards. We urgently request you investigate and take immediate action to disable this domain or block its DNS resolution to protect users.

Sincerely,
[Your Name]
    """,
    "Malware": """
Subject: Immediate Action Required: Malware Distribution ‚Äì {domain}

Dear Abuse Team,

The domain {domain} is distributing malware, endangering users by infecting systems with harmful software. This is a critical threat to cybersecurity.

Details:
- Domain: {domain}
- Issue: Malware
- Evidence: {evidence}
- Description: {description}

We demand swift investigation and removal of this domain or its malicious content from your services to prevent further harm.

Sincerely,
[Your Name]
    """,
    "Botnet": """
Subject: Critical: Botnet Activity on {domain}

Dear Abuse Team,

We have detected {domain} engaging in botnet activities, orchestrating malicious operations that compromise user devices and networks.

Details:
- Domain: {domain}
- Issue: Botnet
- Evidence: {evidence}
- Description: {description}

This severe violation requires immediate action. Please investigate and disable this domain or block its DNS resolution to halt the botnet‚Äôs operations.

Sincerely,
[Your Name]
    """,
    "Spam": """
Subject: Urgent: Spam Originating from {domain}

Dear Abuse Team,

The domain {domain} is a source of abusive spam, flooding users with unsolicited and potentially harmful content, disrupting online trust.

Details:
- Domain: {domain}
- Issue: Spam
- Evidence: {evidence}
- Description: {description}

We request you promptly investigate and suspend this domain or its associated services to stop the spam activity.

Sincerely,
[Your Name]
    """,
    "Pharming": """
Subject: Immediate Takedown Required: Pharming Attack ‚Äì {domain}

Dear Abuse Team,

The domain {domain} is conducting pharming attacks, redirecting users to malicious sites to steal sensitive information, posing a grave threat.

Details:
- Domain: {domain}
- Issue: Pharming
- Evidence: {evidence}
- Description: {description}

We urgently demand investigation and immediate disabling of this domain or its DNS resolution to protect users from this attack.

Sincerely,
[Your Name]
    """,
    "Counterfeit": """
Subject: Urgent: Counterfeit Website Takedown Request ‚Äì {domain}

Dear Abuse Team,

The domain {domain} is operating a counterfeit website, fraudulently impersonating a legitimate brand to deceive users and cause financial harm.

Details:
- Domain: {domain}
- Issue: Counterfeit
- Evidence: {evidence}
- Description: {description}

This fraudulent activity violates intellectual property rights. We insist on immediate investigation and removal of this domain to prevent further deception.

Sincerely,
[Your Name]
    """
}

# Options m√¥ t·∫£ cho t·ª´ng lo·∫°i v·∫•n ƒë·ªÅ (b·∫±ng ti·∫øng Anh)
DESCRIPTION_OPTIONS = {
    "Phishing": [
        "Impersonates a login page to steal user credentials.",
        "Creates fraudulent forms to collect sensitive data like passwords or credit cards.",
        "Mimics a trusted brand to trick users into sharing personal information.",
        "Sends fake emails linking to a credential-stealing website."
    ],
    "Malware": [
        "Distributes malicious software harming user devices.",
        "Automatically downloads malware upon website access.",
        "Spreads ransomware locking user data.",
        "Installs spyware tracking user activities."
    ],
    "Botnet": [
        "Controls a botnet for launching DDoS attacks.",
        "Recruits user devices into a botnet via malware.",
        "Uses the domain to manage and distribute botnet commands.",
        "Conducts malicious activities through a botnet."
    ],
    "Spam": [
        "Sends spam emails promoting fraudulent products/services.",
        "Distributes malicious links via spam emails or messages.",
        "Uses the domain for mass unsolicited email campaigns.",
        "Tricks users into clicking spam links to fake websites."
    ],
    "Pharming": [
        "Redirects users to fake websites to steal information.",
        "Alters DNS settings to lead users to malicious sites.",
        "Deceives users into accessing fake websites via DNS manipulation.",
        "Performs pharming attacks to harvest sensitive data."
    ],
    "Counterfeit": [
        "Sells counterfeit products, violating intellectual property rights.",
        "Impersonates a brand to scam users with fake goods.",
        "Uses fake logos/branding to deceive customers.",
        "Operates a fraudulent website mimicking an official store."
    ]
}

# === Giao di·ªán nh·∫≠p li·ªáu ===
st.set_page_config(page_title="Fake Website Takedown Tool", page_icon="üîí")
st.title("üîí Fake Website Takedown Tool (Bulk)")

# L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ secrets
accounts = {}
try:
    accounts = {
        st.secrets["gmail"]["account1"]["sender_email"]: st.secrets["gmail"]["account1"]["password"],
        st.secrets["gmail"]["account2"]["sender_email"]: st.secrets["gmail"]["account2"]["password"],
        st.secrets["gmail"]["account3"]["sender_email"]: st.secrets["gmail"]["account3"]["password"],
        st.secrets["gmail"]["account4"]["sender_email"]: st.secrets["gmail"]["account4"]["password"],
        st.secrets["gmail"]["account5"]["sender_email"]: st.secrets["gmail"]["account5"]["password"],
        st.secrets["gmail"]["account6"]["sender_email"]: st.secrets["gmail"]["account6"]["password"],
        st.secrets["gmail"]["account7"]["sender_email"]: st.secrets["gmail"]["account7"]["password"],
        st.secrets["gmail"]["account8"]["sender_email"]: st.secrets["gmail"]["account8"]["password"],
        st.secrets["gmail"]["account9"]["sender_email"]: st.secrets["gmail"]["account9"]["password"]
    }
except KeyError as e:
    st.warning(f"‚ö†Ô∏è L·ªói c·∫•u h√¨nh secrets: {e}. S·ª≠ d·ª•ng nh·∫≠p th·ªß c√¥ng.")

# Ch·ªçn ho·∫∑c nh·∫≠p sender_email
if accounts:
    sender_email = st.selectbox("üìß Ch·ªçn Gmail ƒë·ªÉ g·ª≠i", list(accounts.keys()))
    password = accounts[sender_email]
else:
    sender_email = st.text_input("üìß Nh·∫≠p Gmail c·ªßa b·∫°n")
    password = st.text_input("üîë Nh·∫≠p App Password", type="password")

domains_input = st.text_area("üåê Nh·∫≠p danh s√°ch t√™n mi·ªÅn gi·∫£ m·∫°o (m·ªói d√≤ng m·ªôt domain)", height=100)
abuse_type = st.selectbox("üö® Ch·ªçn lo·∫°i vi ph·∫°m", ["Phishing", "Malware", "Botnet", "Spam", "Pharming", "Counterfeit"])
evidence = st.text_area("üìé Nh·∫≠p b·∫±ng ch·ª©ng b·ªï sung (URL, m√¥ t·∫£, v.v.)", height=100)
description = st.selectbox("üìù Ch·ªçn m√¥ t·∫£ h√†nh vi gi·∫£ m·∫°o", DESCRIPTION_OPTIONS[abuse_type])
custom_description = st.text_area("üìù (T√πy ch·ªçn) Nh·∫≠p m√¥ t·∫£ t√πy ch·ªânh (b·∫±ng ti·∫øng Anh)", height=100, placeholder="ƒê·ªÉ tr·ªëng n·∫øu d√πng m√¥ t·∫£ s·∫µn.")

# === Khi nh·∫•n n√∫t X·ª≠ l√Ω ===
if st.button("‚öîÔ∏è X·ª≠ l√Ω h√†ng lo·∫°t"):
    # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if not all([sender_email, password, domains_input, abuse_type]):
        st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc!")
    else:
        # Chia danh s√°ch domain
        domains = [d.strip() for d in domains_input.split("\n") if d.strip()]
        if not domains:
            st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt domain!")
            st.stop()

        # D√πng custom_description n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng description t·ª´ dropdown
        final_description = custom_description if custom_description else description

        results = []
        for domain in domains:
            # L·∫•y th√¥ng tin DNS provider t·ª´ NS records
            dns_provider = ""
            to_email = None
            try:
                answers = dns.resolver.resolve(domain, 'NS')
                ns_records = [str(rdata) for rdata in answers]
                for ns in ns_records:
                    if "cloudflare" in ns.lower():
                        dns_provider = "Cloudflare"
                        to_email = "registrar-abuse@cloudflare.com"
                        break
                if not to_email:
                    dns_provider = "Unknown"
                    to_email = "abuse@dnsprovider"
            except Exception as e:
                results.append(f"‚ùå Domain {domain}: L·ªói khi l·∫•y NS records: {e}")
                logger.error(f"Domain={domain}, Error=Failed to get NS records: {e}")
                continue

            # T·∫°o n·ªôi dung b√°o c√°o t·ª´ m·∫´u
            report_body = EMAIL_TEMPLATES[abuse_type].format(
                domain=domain,
                evidence=evidence if evidence else "No additional evidence provided",
                description=final_description
            )

            # G·ª≠i email b√°o c√°o
            email_status = "Skipped"
            try:
                msg = EmailMessage()
                msg['From'] = sender_email
                msg['To'] = to_email
                msg['Subject'] = report_body.split('\n')[0].replace("Subject: ", "")
                msg.set_content(report_body)

                with smtplib.SMTP("smtp.gmail.com", 587) as server:
                    server.starttls()
                    server.login(sender_email, password)
                    server.send_message(msg)

                email_status = "Sent"
            except Exception as e:
                email_status = f"Failed: {e}"
                logger.error(f"Domain={domain}, EmailError=Failed to send email: {e}")

            # Ki·ªÉm tra tr·∫°ng th√°i domain
            domain_status = "Active"
            try:
                requests.get(f"http://{domain}", timeout=5)
            except requests.ConnectionError:
                domain_status = "Down"

            # Ghi log
            log_message = (
                f"Report processed: Domain={domain}, DNSProvider={dns_provider}, "
                f"To={to_email}, AbuseType={abuse_type}, EmailStatus={email_status}, "
                f"DomainStatus={domain_status}, Evidence={evidence}, Description={final_description}, Content=\n{report_body}"
            )
            logger.info(log_message)
            results.append(
                f"‚úÖ Domain {domain}: DNSProvider={dns_provider}, Email={email_status}, Status={domain_status}"
            )

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.write("### K·∫øt qu·∫£ x·ª≠ l√Ω:")
        for result in results:
            st.write(result)
        if any("Cloudflare" in r for r in results):
            st.info("‚ÑπÔ∏è ƒê·ªÉ g·ª≠i b√°o c√°o nhanh, ƒëi·ªÅn form online c·ªßa Cloudflare: https://www.cloudflare.com/abuse/")
        if any("Phishing" in r for r in results):
            st.info("‚ÑπÔ∏è B√°o c√°o phishing t·ªõi Google Safe Browsing: https://safebrowsing.google.com/safebrowsing/report_phish/")
        st.info("‚ÑπÔ∏è G·ª≠i b√°o c√°o th·ªß c√¥ng t·ªõi NetBeacon: https://netbeacon.org")
